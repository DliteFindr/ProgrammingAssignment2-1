{
    "contents" : "## These functions take advantage of scoping rules\n## where results are kept in the function environment\n\n## This function makes a matrix object to be cached\n\nmakeCacheMatrix <- function(x = matrix()) {       ## function params\n        m <- NULL                                 ## resetting vari \"m\"\n        set <- function(y) {                      ## Undefinde function\n                x <<- y\n                m <<- NULL\n        }\n        get <- function() x                       ## Calling & setting \n        setmatrix <- function(matrix) m <<- matrix   ## variables in cache\n        getmatrix <- function() m\n        list(set = set, get = get,\n             setmatrix = setmatrix,\n             getmatrix = getmatrix)\n}\n\n\n## This function computes the inverse of a matrix from makeCacheMatrix\n\ncacheSolve <- function(x, ...) {         ## setting function param\n        m <- x$getmatrix()               ## retieving matrix\n        if(!is.null(m)) {                ## checking to see if there's a matrix\n                message(\"getting cached data\")\n                return(m)\n        }\n        data <- x$get()                  ## getting matrix\n        m <- solve(data, ...)            ## calc inverse of matrix\n        x$setmatrix(m)                   \n        m                                ## output\n}\n",
    "created" : 1424636915081.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1787008339",
    "id" : "59790631",
    "lastKnownWriteTime" : 1424638499,
    "path" : "D:/Coursera/DataScience/Rprogramming/ProgrammingAssignment2/ProgrammingAssignment2-1/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}